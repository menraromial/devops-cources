pipeline {
    agent any
    
    environment {
        APP_NAME = 'calculator-app'
        VERSION = '1.0.0'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üì• R√©cup√©ration du code source...'
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                echo 'üî® Construction de l\'application...'
                sh './build.sh'
            }
        }
        
        stage('Test') {
            steps {
                echo 'üß™ Ex√©cution des tests...'
                sh 'python3 -m unittest test_app.py -v'
            }
            post {
                always {
                    echo 'üìä Archivage des r√©sultats de tests...'
                    // En production, on utiliserait des plugins pour les rapports de tests
                }
            }
        }
        
        stage('Package') {
            steps {
                echo 'üì¶ Cr√©ation du package de d√©ploiement...'
                sh '''
                    echo "Cr√©ation de l'archive de d√©ploiement..."
                    tar -czf ${APP_NAME}-${VERSION}.tar.gz dist/
                    ls -la *.tar.gz
                '''
            }
        }
        
        stage('Deploy to Staging') {
            steps {
                echo 'üöÄ D√©ploiement en staging...'
                sh './deploy.sh'
            }
        }
        
        stage('Integration Tests') {
            steps {
                echo 'üîç Tests d\'int√©gration...'
                sh '''
                    echo "Ex√©cution des tests d'int√©gration..."
                    # Ici on pourrait avoir des tests d'int√©gration r√©els
                    python3 /tmp/deployed-app/app.py &
                    APP_PID=$!
                    sleep 2
                    kill $APP_PID || true
                    echo "Tests d'int√©gration termin√©s"
                '''
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                echo 'üåü D√©ploiement en production...'
                input message: 'D√©ployer en production?', ok: 'D√©ployer'
                sh '''
                    echo "D√©ploiement en production simul√©..."
                    mkdir -p /tmp/production-app
                    cp -r dist/* /tmp/production-app/
                    echo "Application d√©ploy√©e en production!"
                '''
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Nettoyage...'
            sh '''
                rm -f *.tar.gz
                echo "Nettoyage termin√©"
            '''
        }
        success {
            echo '‚úÖ Pipeline ex√©cut√© avec succ√®s!'
        }
        failure {
            echo '‚ùå Pipeline √©chou√©!'
        }
    }
}
