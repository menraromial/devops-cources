#!/bin/bash

# Script de validation pour l'Exercice 2 : Introduction √† Docker
# Ce script v√©rifie que toutes les t√¢ches ont √©t√© correctement r√©alis√©es

set -e

echo "üê≥ Validation de l'Exercice 2 : Introduction √† Docker"
echo "=================================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Compteurs
TESTS_PASSED=0
TESTS_TOTAL=0

# Fonction pour afficher les r√©sultats
check_result() {
    local test_name="$1"
    local result="$2"
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    
    if [ "$result" = "0" ]; then
        echo -e "‚úÖ ${GREEN}PASS${NC}: $test_name"
        TESTS_PASSED=$((TESTS_PASSED + 1))
    else
        echo -e "‚ùå ${RED}FAIL${NC}: $test_name"
    fi
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -d "/workspace/02-docker-intro" ]; then
    echo -e "${RED}‚ùå Erreur: Le dossier /workspace/02-docker-intro n'existe pas${NC}"
    echo "Assurez-vous d'avoir suivi les instructions de l'exercice."
    exit 1
fi

cd /workspace/02-docker-intro

echo -e "\n${YELLOW}1. V√©rification des fichiers cr√©√©s${NC}"

# Test 1: Fichier app.py existe
[ -f "app.py" ]
check_result "Fichier app.py existe" $?

# Test 2: Dockerfile existe
[ -f "Dockerfile" ]
check_result "Dockerfile existe" $?

# Test 3: docker-compose.yml existe
[ -f "docker-compose.yml" ]
check_result "docker-compose.yml existe" $?

# Test 4: nginx.conf existe
[ -f "nginx.conf" ]
check_result "nginx.conf existe" $?

# Test 5: .dockerignore existe
[ -f ".dockerignore" ]
check_result ".dockerignore existe" $?

echo -e "\n${YELLOW}2. V√©rification du contenu des fichiers${NC}"

# Test 6: app.py contient du code Python
grep -q "python" app.py 2>/dev/null
check_result "app.py contient du code Python" $?

# Test 7: Dockerfile utilise une image Python
grep -q "FROM python" Dockerfile 2>/dev/null
check_result "Dockerfile utilise une image Python" $?

# Test 8: docker-compose.yml d√©finit des services
grep -q "services:" docker-compose.yml 2>/dev/null
check_result "docker-compose.yml d√©finit des services" $?

# Test 9: nginx.conf contient une configuration
grep -q "server" nginx.conf 2>/dev/null
check_result "nginx.conf contient une configuration serveur" $?

echo -e "\n${YELLOW}3. V√©rification des bonnes pratiques Docker${NC}"

# Test 10: Dockerfile utilise un utilisateur non-root
grep -q "USER" Dockerfile 2>/dev/null
check_result "Dockerfile utilise un utilisateur non-root" $?

# Test 11: Dockerfile expose un port
grep -q "EXPOSE" Dockerfile 2>/dev/null
check_result "Dockerfile expose un port" $?

# Test 12: .dockerignore contient des patterns
grep -q "*.log" .dockerignore 2>/dev/null
check_result ".dockerignore contient des patterns de fichiers" $?

# Test 13: docker-compose.yml utilise des volumes
grep -q "volumes:" docker-compose.yml 2>/dev/null
check_result "docker-compose.yml utilise des volumes" $?

# Test 14: docker-compose.yml utilise des networks
grep -q "networks:" docker-compose.yml 2>/dev/null
check_result "docker-compose.yml utilise des networks" $?

echo -e "\n${YELLOW}4. Tests de construction d'images${NC}"

# Test 15: V√©rifier si l'image peut √™tre construite
docker build -t test-validation . > /dev/null 2>&1
check_result "Image Docker peut √™tre construite" $?

# Test 16: V√©rifier si l'image existe
docker images | grep -q "test-validation" 2>/dev/null
check_result "Image test-validation existe" $?

echo -e "\n${YELLOW}5. Tests de docker-compose${NC}"

# Test 17: docker-compose.yml est valide
docker-compose config > /dev/null 2>&1
check_result "docker-compose.yml est syntaxiquement valide" $?

# Test 18: V√©rifier les services d√©finis
docker-compose config --services | grep -q "web" 2>/dev/null
check_result "Service 'web' d√©fini dans docker-compose.yml" $?

docker-compose config --services | grep -q "redis" 2>/dev/null
check_result "Service 'redis' d√©fini dans docker-compose.yml" $?

docker-compose config --services | grep -q "nginx" 2>/dev/null
check_result "Service 'nginx' d√©fini dans docker-compose.yml" $?

echo -e "\n${YELLOW}6. Tests avanc√©s${NC}"

# Test 19: V√©rifier la structure du Dockerfile
grep -q "WORKDIR" Dockerfile 2>/dev/null
check_result "Dockerfile d√©finit un WORKDIR" $?

# Test 20: V√©rifier les variables d'environnement
grep -q "ENV" Dockerfile 2>/dev/null
check_result "Dockerfile d√©finit des variables d'environnement" $?

# Test 21: V√©rifier si Dockerfile.optimized existe
[ -f "Dockerfile.optimized" ]
check_result "Dockerfile.optimized existe (bonus)" $?

echo -e "\n${YELLOW}7. Nettoyage des ressources de test${NC}"

# Nettoyer l'image de test
docker rmi test-validation > /dev/null 2>&1 || true

echo -e "\n=================================================="
echo -e "üìä ${YELLOW}R√©sultats de la validation${NC}"
echo -e "Tests r√©ussis: ${GREEN}$TESTS_PASSED${NC}/$TESTS_TOTAL"

# Calcul du pourcentage
PERCENTAGE=$((TESTS_PASSED * 100 / TESTS_TOTAL))

if [ $TESTS_PASSED -eq $TESTS_TOTAL ]; then
    echo -e "üéâ ${GREEN}F√©licitations ! Tous les tests sont pass√©s avec succ√®s !${NC}"
    echo -e "Vous ma√Ætrisez les concepts fondamentaux de Docker."
elif [ $PERCENTAGE -ge 80 ]; then
    echo -e "üëç ${YELLOW}Bon travail ! $PERCENTAGE% des tests sont pass√©s.${NC}"
    echo -e "Quelques points √† am√©liorer, mais vous √™tes sur la bonne voie."
else
    echo -e "üìö ${RED}Il reste du travail. Seulement $PERCENTAGE% des tests sont pass√©s.${NC}"
    echo -e "Relisez les instructions et r√©essayez."
fi

echo -e "\n${YELLOW}üí° Conseils pour la suite :${NC}"
echo "- Explorez les registries Docker (Docker Hub, ECR, etc.)"
echo "- Apprenez Docker Swarm pour l'orchestration"
echo "- D√©couvrez les outils de s√©curit√© Docker (Clair, Trivy)"
echo "- Pratiquez les patterns de d√©ploiement avec Docker"

echo -e "\n${YELLOW}üîß Commandes utiles pour d√©boguer :${NC}"
echo "- docker logs <container>     : Voir les logs d'un container"
echo "- docker exec -it <container> sh : Se connecter √† un container"
echo "- docker system df            : Voir l'utilisation de l'espace"
echo "- docker system prune         : Nettoyer les ressources inutilis√©es"

exit 0