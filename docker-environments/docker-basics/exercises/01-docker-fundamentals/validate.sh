#!/bin/bash

# Script de validation pour l'exercice Docker Fundamentals
# V√©rifie que l'√©tudiant a correctement r√©alis√© toutes les √©tapes

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Compteurs
TESTS_PASSED=0
TESTS_TOTAL=0

# Fonction pour afficher les messages
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
    ((TESTS_PASSED++))
}

log_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

# Fonction pour ex√©cuter un test
run_test() {
    local test_name="$1"
    local test_command="$2"
    local expected_result="$3"
    
    ((TESTS_TOTAL++))
    log_info "Test: $test_name"
    
    if eval "$test_command" > /dev/null 2>&1; then
        log_success "$test_name"
        return 0
    else
        log_error "$test_name"
        return 1
    fi
}

# Fonction pour v√©rifier qu'une commande retourne un r√©sultat sp√©cifique
check_command_output() {
    local test_name="$1"
    local command="$2"
    local expected_pattern="$3"
    
    ((TESTS_TOTAL++))
    log_info "Test: $test_name"
    
    local output
    output=$(eval "$command" 2>/dev/null || echo "")
    
    if echo "$output" | grep -q "$expected_pattern"; then
        log_success "$test_name"
        return 0
    else
        log_error "$test_name - Pattern '$expected_pattern' not found in output"
        return 1
    fi
}

echo "üê≥ Validation de l'exercice Docker Fundamentals"
echo "=============================================="
echo ""

# Test 1: V√©rifier que Docker fonctionne
log_info "V√©rification de l'environnement Docker..."
run_test "Docker est install√© et fonctionne" "docker --version"

# Test 2: V√©rifier que l'image Alpine a √©t√© t√©l√©charg√©e
run_test "Image Alpine t√©l√©charg√©e" "docker images | grep -q alpine"

# Test 3: V√©rifier la pr√©sence d'images dans le registry local
log_info "V√©rification du registry local..."
if curl -s http://localhost:5000/v2/_catalog | grep -q "repositories"; then
    log_success "Registry local accessible"
    ((TESTS_PASSED++))
else
    log_error "Registry local non accessible"
fi
((TESTS_TOTAL++))

# Test 4: V√©rifier qu'une image a √©t√© pouss√©e vers le registry
if curl -s http://localhost:5000/v2/_catalog | grep -q "mon-alpine"; then
    log_success "Image pouss√©e vers le registry local"
    ((TESTS_PASSED++))
else
    log_warning "Aucune image 'mon-alpine' trouv√©e dans le registry local"
fi
((TESTS_TOTAL++))

# Test 5: V√©rifier la cr√©ation de volumes
log_info "V√©rification des volumes..."
if docker volume ls | grep -q "mon-volume"; then
    log_success "Volume 'mon-volume' cr√©√©"
    ((TESTS_PASSED++))
else
    log_warning "Volume 'mon-volume' non trouv√© (peut avoir √©t√© nettoy√©)"
fi
((TESTS_TOTAL++))

# Test 6: V√©rifier la cr√©ation de r√©seaux
log_info "V√©rification des r√©seaux..."
if docker network ls | grep -q "mon-reseau"; then
    log_success "R√©seau 'mon-reseau' cr√©√©"
    ((TESTS_PASSED++))
else
    log_warning "R√©seau 'mon-reseau' non trouv√© (peut avoir √©t√© nettoy√©)"
fi
((TESTS_TOTAL++))

# Test 7: V√©rifier que l'√©tudiant peut cr√©er et ex√©cuter un conteneur
log_info "Test de cr√©ation de conteneur..."
if docker run --rm alpine:latest echo "Test validation" > /dev/null 2>&1; then
    log_success "Capable de cr√©er et ex√©cuter un conteneur"
    ((TESTS_PASSED++))
else
    log_error "Impossible de cr√©er et ex√©cuter un conteneur"
fi
((TESTS_TOTAL++))

# Test 8: V√©rifier la compr√©hension des bind mounts
log_info "V√©rification des bind mounts..."
if [ -d "$HOME/docker-lab/html" ]; then
    log_success "R√©pertoire de bind mount cr√©√©"
    ((TESTS_PASSED++))
else
    log_warning "R√©pertoire de bind mount non trouv√©"
fi
((TESTS_TOTAL++))

# Test 9: V√©rifier que les services du lab fonctionnent
log_info "V√©rification des services du lab..."
services=("nodejs-app" "python-app" "go-app" "postgres" "redis")
services_ok=0

for service in "${services[@]}"; do
    if docker ps | grep -q "$service"; then
        ((services_ok++))
    fi
done

if [ $services_ok -ge 3 ]; then
    log_success "Services du lab op√©rationnels"
    ((TESTS_PASSED++))
else
    log_error "Certains services du lab ne fonctionnent pas"
fi
((TESTS_TOTAL++))

# Test 10: V√©rifier la compr√©hension des commandes Docker
log_info "Test des connaissances pratiques..."

# Cr√©er un conteneur de test pour validation
test_container="validation-test-$$"
if docker run -d --name "$test_container" nginx:alpine > /dev/null 2>&1; then
    sleep 2
    
    # V√©rifier que le conteneur fonctionne
    if docker ps | grep -q "$test_container"; then
        log_success "Ma√Ætrise de la cr√©ation de conteneurs"
        ((TESTS_PASSED++))
    else
        log_error "Probl√®me avec la cr√©ation de conteneurs"
    fi
    
    # Nettoyer
    docker stop "$test_container" > /dev/null 2>&1
    docker rm "$test_container" > /dev/null 2>&1
else
    log_error "Impossible de cr√©er un conteneur de test"
fi
((TESTS_TOTAL++))

echo ""
echo "=============================================="
echo "üìä R√©sultats de la validation"
echo "=============================================="
echo ""

# Calcul du pourcentage
percentage=$((TESTS_PASSED * 100 / TESTS_TOTAL))

echo "Tests r√©ussis: $TESTS_PASSED/$TESTS_TOTAL ($percentage%)"
echo ""

if [ $percentage -ge 80 ]; then
    echo -e "${GREEN}üéâ F√©licitations ! Exercice valid√© avec succ√®s !${NC}"
    echo ""
    echo "Vous avez d√©montr√© une bonne ma√Ætrise des concepts fondamentaux de Docker :"
    echo "‚úì Manipulation des images et conteneurs"
    echo "‚úì Gestion des volumes et de la persistance"
    echo "‚úì Configuration des r√©seaux"
    echo "‚úì Utilisation du registry local"
    echo ""
    echo "üöÄ Vous pouvez maintenant passer √† l'exercice suivant :"
    echo "   cd ../02-custom-images"
    echo ""
elif [ $percentage -ge 60 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Exercice partiellement valid√©${NC}"
    echo ""
    echo "Vous avez acquis les bases, mais quelques points n√©cessitent une r√©vision."
    echo "Consultez les sections correspondant aux tests √©chou√©s et recommencez."
    echo ""
else
    echo -e "${RED}‚ùå Exercice non valid√©${NC}"
    echo ""
    echo "Il semble que plusieurs concepts n'aient pas √©t√© ma√Ætris√©s."
    echo "Nous vous recommandons de :"
    echo "1. Relire attentivement les instructions"
    echo "2. Recommencer l'exercice √©tape par √©tape"
    echo "3. Consulter la documentation Docker"
    echo "4. Demander de l'aide si n√©cessaire"
    echo ""
fi

echo "=============================================="

# Code de sortie bas√© sur le pourcentage de r√©ussite
if [ $percentage -ge 80 ]; then
    exit 0
else
    exit 1
fi