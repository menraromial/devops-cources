#!/bin/bash

# Docker Basics Lab - Script de d√©marrage
# Ce script initialise l'environnement Docker complet pour les exercices

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rification des pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√©. Veuillez installer Docker avant de continuer."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose n'est pas install√©. Veuillez installer Docker Compose avant de continuer."
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        log_error "Docker n'est pas d√©marr√©. Veuillez d√©marrer Docker avant de continuer."
        exit 1
    fi
    
    log_success "Pr√©requis v√©rifi√©s avec succ√®s"
}

# Nettoyage des ressources existantes
cleanup_existing() {
    log_info "Nettoyage des ressources existantes..."
    
    # Arr√™ter les conteneurs existants
    docker-compose down --remove-orphans 2>/dev/null || true
    
    # Supprimer les images orphelines
    docker image prune -f 2>/dev/null || true
    
    log_success "Nettoyage termin√©"
}

# Construction des images personnalis√©es
build_images() {
    log_info "Construction des images Docker personnalis√©es..."
    
    # Construire toutes les images en parall√®le
    docker-compose build --parallel
    
    log_success "Images construites avec succ√®s"
}

# D√©marrage des services
start_services() {
    log_info "D√©marrage des services Docker..."
    
    # D√©marrer les services de base d'abord
    log_info "D√©marrage des services de base (bases de donn√©es, registry)..."
    docker-compose up -d registry postgres redis mongodb
    
    # Attendre que les bases de donn√©es soient pr√™tes
    log_info "Attente de la disponibilit√© des bases de donn√©es..."
    sleep 10
    
    # D√©marrer les applications
    log_info "D√©marrage des applications..."
    docker-compose up -d nodejs-app python-app go-app
    
    # D√©marrer le monitoring
    log_info "D√©marrage du monitoring..."
    docker-compose up -d prometheus grafana cadvisor
    
    # D√©marrer le reverse proxy
    log_info "D√©marrage du reverse proxy..."
    docker-compose up -d nginx
    
    log_success "Tous les services sont d√©marr√©s"
}

# V√©rification de l'√©tat des services
check_services() {
    log_info "V√©rification de l'√©tat des services..."
    
    # Attendre que tous les services soient pr√™ts
    sleep 15
    
    # V√©rifier les services critiques
    services=("registry" "postgres" "redis" "nodejs-app" "python-app" "go-app")
    
    for service in "${services[@]}"; do
        if docker-compose ps | grep -q "$service.*Up"; then
            log_success "$service est op√©rationnel"
        else
            log_warning "$service n'est pas encore pr√™t"
        fi
    done
}

# Affichage des informations de connexion
show_connection_info() {
    echo ""
    echo "=================================="
    echo "üê≥ Docker Basics Lab - Pr√™t ! üê≥"
    echo "=================================="
    echo ""
    echo "üìã Services disponibles :"
    echo ""
    echo "üîß Applications :"
    echo "  ‚Ä¢ Node.js App    : http://localhost:3000"
    echo "  ‚Ä¢ Python App     : http://localhost:5001"
    echo "  ‚Ä¢ Go App         : http://localhost:8080"
    echo "  ‚Ä¢ Nginx Proxy    : http://localhost"
    echo ""
    echo "üíæ Bases de donn√©es :"
    echo "  ‚Ä¢ PostgreSQL     : localhost:5432 (labuser/labpass)"
    echo "  ‚Ä¢ Redis          : localhost:6379"
    echo "  ‚Ä¢ MongoDB        : localhost:27017 (admin/password)"
    echo ""
    echo "üìä Monitoring :"
    echo "  ‚Ä¢ Prometheus     : http://localhost:9090"
    echo "  ‚Ä¢ Grafana        : http://localhost:3001 (admin/admin)"
    echo "  ‚Ä¢ cAdvisor       : http://localhost:8081"
    echo ""
    echo "üè™ Registry :"
    echo "  ‚Ä¢ Docker Registry: http://localhost:5000"
    echo ""
    echo "üìö Commandes utiles :"
    echo "  ‚Ä¢ Voir les logs  : docker-compose logs [service]"
    echo "  ‚Ä¢ √âtat services  : docker-compose ps"
    echo "  ‚Ä¢ Arr√™ter tout   : docker-compose down"
    echo "  ‚Ä¢ Aide compl√®te  : ./help.sh"
    echo ""
    echo "üéØ Commencer les exercices :"
    echo "  cd exercises/01-docker-fundamentals"
    echo "  cat README.md"
    echo ""
    echo "=================================="
}

# Fonction principale
main() {
    echo "üöÄ D√©marrage du Docker Basics Lab..."
    echo ""
    
    check_prerequisites
    cleanup_existing
    build_images
    start_services
    check_services
    show_connection_info
    
    log_success "Environnement Docker Basics Lab pr√™t √† l'utilisation !"
}

# Gestion des signaux pour un arr√™t propre
trap 'log_warning "Arr√™t du script..."; docker-compose down; exit 1' INT TERM

# Ex√©cution du script principal
main "$@"