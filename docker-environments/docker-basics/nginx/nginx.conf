user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 16M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";

    # Upstream definitions
    upstream nodejs_app {
        server nodejs-app:3000;
        keepalive 32;
    }

    upstream python_app {
        server python-app:5000;
        keepalive 32;
    }

    upstream go_app {
        server go-app:8080;
        keepalive 32;
    }

    upstream prometheus {
        server prometheus:9090;
    }

    upstream grafana {
        server grafana:3000;
    }

    # Default server (page d'accueil)
    server {
        listen 80 default_server;
        server_name _;
        
        root /usr/share/nginx/html;
        index index.html;

        # Page d'accueil du lab
        location / {
            return 200 '<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üê≥ Docker Basics Lab</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #2196F3; text-align: center; margin-bottom: 30px; }
        .services { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 30px; }
        .service { background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #2196F3; }
        .service h3 { margin-top: 0; color: #333; }
        .service a { color: #2196F3; text-decoration: none; font-weight: bold; }
        .service a:hover { text-decoration: underline; }
        .status { display: inline-block; padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: bold; }
        .status.online { background: #4CAF50; color: white; }
        .footer { text-align: center; margin-top: 40px; color: #666; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üê≥ Docker Basics Lab Environment</h1>
        <p>Bienvenue dans l\'environnement de laboratoire Docker ! Tous les services sont op√©rationnels et pr√™ts pour vos exercices.</p>
        
        <div class="services">
            <div class="service">
                <h3>üü¢ Applications</h3>
                <p><a href="/nodejs/" target="_blank">Node.js App</a> <span class="status online">ONLINE</span><br>
                Application web moderne avec Express.js</p>
                <p><a href="/python/" target="_blank">Python App</a> <span class="status online">ONLINE</span><br>
                API REST avec Flask et PostgreSQL</p>
                <p><a href="/go/" target="_blank">Go App</a> <span class="status online">ONLINE</span><br>
                Microservice haute performance avec Gin</p>
            </div>
            
            <div class="service">
                <h3>üìä Monitoring</h3>
                <p><a href="/prometheus/" target="_blank">Prometheus</a> <span class="status online">ONLINE</span><br>
                Collecte et stockage des m√©triques</p>
                <p><a href="/grafana/" target="_blank">Grafana</a> <span class="status online">ONLINE</span><br>
                Dashboards et visualisations (admin/admin)</p>
                <p><a href="http://localhost:8081" target="_blank">cAdvisor</a> <span class="status online">ONLINE</span><br>
                M√©triques des conteneurs Docker</p>
            </div>
            
            <div class="service">
                <h3>üíæ Bases de Donn√©es</h3>
                <p><strong>PostgreSQL</strong> <span class="status online">ONLINE</span><br>
                Port: 5432 | User: labuser | Pass: labpass</p>
                <p><strong>Redis</strong> <span class="status online">ONLINE</span><br>
                Port: 6379 | Cache et sessions</p>
                <p><strong>MongoDB</strong> <span class="status online">ONLINE</span><br>
                Port: 27017 | User: admin | Pass: password</p>
            </div>
            
            <div class="service">
                <h3>üè™ Registry</h3>
                <p><a href="http://localhost:5000/v2/_catalog" target="_blank">Docker Registry</a> <span class="status online">ONLINE</span><br>
                Registry local pour vos images Docker</p>
            </div>
        </div>
        
        <div class="footer">
            <p>üéØ <strong>Commencer les exercices :</strong> <code>cd exercises/01-docker-fundamentals</code></p>
            <p>üìö <strong>Aide :</strong> <code>./help.sh</code></p>
        </div>
    </div>
</body>
</html>';
            add_header Content-Type text/html;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Node.js application
    server {
        listen 80;
        server_name nodejs.localhost;
        
        location / {
            proxy_pass http://nodejs_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }

    # Route pour Node.js via path
    server {
        listen 80;
        server_name _;
        
        location /nodejs/ {
            proxy_pass http://nodejs_app/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Python application
    server {
        listen 80;
        server_name python.localhost;
        
        location / {
            proxy_pass http://python_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Route pour Python via path
    server {
        listen 80;
        server_name _;
        
        location /python/ {
            proxy_pass http://python_app/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Go application
    server {
        listen 80;
        server_name go.localhost;
        
        location / {
            proxy_pass http://go_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Route pour Go via path
    server {
        listen 80;
        server_name _;
        
        location /go/ {
            proxy_pass http://go_app/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Prometheus
    server {
        listen 80;
        server_name prometheus.localhost;
        
        location / {
            proxy_pass http://prometheus;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Route pour Prometheus via path
    server {
        listen 80;
        server_name _;
        
        location /prometheus/ {
            proxy_pass http://prometheus/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Grafana
    server {
        listen 80;
        server_name grafana.localhost;
        
        location / {
            proxy_pass http://grafana;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Route pour Grafana via path
    server {
        listen 80;
        server_name _;
        
        location /grafana/ {
            proxy_pass http://grafana/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}